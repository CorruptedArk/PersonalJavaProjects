/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package multiplicationtesting;

import java.awt.event.KeyEvent;
import java.io.IOException;
import java.util.Random;
import java.util.concurrent.TimeUnit;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author Noah
 */
public class MultiplicationProblems extends javax.swing.JFrame {
    private final int amount, high, low;
    private final Random random = new Random();
    private int problemCount = 0;
    private int correctAnswer = 0;
    private long startTime = 0;
    private long endTime = 0;
    private long duration = 0;
    private int oneText;
    private int twoText;
    private boolean wasCorrect = false;
    WriteFile logWriter;
    ReadFile logFile;
    String logPath;
    String[] logFileText;
    
    /**
     * Creates new form MultiplicationProblems
     * @param amount the amount of problems
     * @param high the highest possible value
     * @param low  the lowest possible value 
     */
    public MultiplicationProblems(int amount, int high, int low) {
        logPath = "results.txt";
        
        try {
            logWriter = new WriteFile(logPath, true);
            logFile = new ReadFile(logPath);
            logFileText = logFile.OpenFile();
           
            
        }
        catch (IOException | ArrayIndexOutOfBoundsException e){
           
        }
        this.high = high;
        this.low = low;
        this.amount = amount;
        initComponents();
        startProblem();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jFormattedTextField1 = new javax.swing.JFormattedTextField();
        numberLabel1 = new javax.swing.JLabel();
        numberLabel2 = new javax.swing.JLabel();
        xLabel = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        answerField = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jFormattedTextField1.setText("jFormattedTextField1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Multiplication");
        setLocationByPlatform(true);
        setResizable(false);

        numberLabel1.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        numberLabel1.setName("numberLabel1"); // NOI18N

        numberLabel2.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        numberLabel2.setName("numberLabel2"); // NOI18N

        xLabel.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        xLabel.setText("X");

        jSeparator1.setBackground(new java.awt.Color(0, 0, 0));
        jSeparator1.setForeground(new java.awt.Color(0, 0, 0));

        answerField.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        answerField.setName("answerField"); // NOI18N
        answerField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                answerFieldKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(numberLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(xLabel)
                        .addGap(18, 18, 18)
                        .addComponent(numberLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(33, 33, 33))
            .addGroup(layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(answerField, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(34, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 41, Short.MAX_VALUE)
                .addComponent(numberLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(xLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 1, Short.MAX_VALUE)
                        .addComponent(numberLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(answerField, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(20, Short.MAX_VALUE))
        );

        numberLabel1.getAccessibleContext().setAccessibleName("numberLabel1");
        numberLabel2.getAccessibleContext().setAccessibleName("numberLabel2");
        answerField.getAccessibleContext().setAccessibleName("answerField");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void answerFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_answerFieldKeyPressed
        if(evt.getKeyCode() == KeyEvent.VK_ENTER){
           endTime = System.currentTimeMillis();
           timeProblem(startTime,endTime);
           evaluteProblem();
           writeLog();
           if(problemCount < amount){
               displayCorrectness();
               startProblem();
           }
           else{
               displayCorrectness();  
               try {
                   TimeUnit.SECONDS.sleep(3);
               } catch (InterruptedException ex) {
                   Logger.getLogger(MultiplicationProblems.class.getName()).log(Level.SEVERE, null, ex);
               }
               this.dispose();
           }
        }
    }//GEN-LAST:event_answerFieldKeyPressed

    private void startProblem(){
        problemCount++;
        oneText = random.nextInt(high - low + 1) + low;
        twoText = random.nextInt(high - low + 1) + low;
        set(numberLabel1,oneText);
        set(numberLabel2,twoText);
        set(answerField,"");
        recordProblem(oneText, twoText);
        startTime = System.currentTimeMillis();
    }
    
    private void recordProblem(int oneText, int twoText){
        correctAnswer = oneText * twoText;
    }
    
    private void evaluteProblem(){
        wasCorrect = extract(answerField) == correctAnswer; 
    }
    
    private void timeProblem(long start, long end){
        duration = (end - start) / 1000;
    }
    
    private void displayCorrectness(){
        if(wasCorrect){
            set(jLabel1, "You were correct.");
        }
        else{
            set(jLabel1, "You were wrong.");
        }
    }
    
    private void set(javax.swing.JLabel label, int value){
        label.setText(Integer.toString(value));
    }
    
    private void set(javax.swing.JTextField field, String value){
        field.setText(value);
    } 
    
    private void set(javax.swing.JLabel label, String value) {
        label.setText(value);
    }
    private int extract(javax.swing.JTextField field){
        int fieldValue;
        
        try{
            fieldValue = Integer.parseInt(field.getText());
        }
        catch(NumberFormatException | NullPointerException e){
            fieldValue = 0;
        }
        
        return fieldValue;
    }
    
   

    private void writeLog() {
        String correct;
        String time;
        if(wasCorrect) {
           correct = " correctly"; 
        }
        else {
            correct = " incorrectly";
        }
        if(duration == 1){
          time = " second.";  
        }
        else{
          time = " seconds.";  
        }
        try {
            logWriter.writeToFile(problemCount + ". The problem " + oneText + " x " + twoText + 
                    " was answered as " + extract(answerField) + correct + " in " + duration + time);
        } catch (IOException ex) {
            Logger.getLogger(MultiplicationProblems.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField answerField;
    private javax.swing.JFormattedTextField jFormattedTextField1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JLabel numberLabel1;
    private javax.swing.JLabel numberLabel2;
    private javax.swing.JLabel xLabel;
    // End of variables declaration//GEN-END:variables
}
