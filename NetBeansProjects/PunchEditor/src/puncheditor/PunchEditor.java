/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package puncheditor;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JLabel;

/**
 *
 * @author Noah
 */
public class PunchEditor extends javax.swing.JFrame {

    static ReadByteFile reader;
    static WriteByteFile writer;
    static ArrayList<Punch> punches;
    static long currentRemaining;
    static String formattedRemaining;
    static Thread remainingThread;
    
    /**
     * Creates new form PunchEditor
     */
    public PunchEditor() {
        initComponents();
        reader = new ReadByteFile("punches.png");
        writer = new WriteByteFile("punches.png");
        readDataFile();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        writeButton = new javax.swing.JButton();
        inOutList = new javax.swing.JSpinner();
        remainingField = new javax.swing.JTextField();
        lateField = new javax.swing.JTextField();
        hourList = new javax.swing.JSpinner();
        minuteList = new javax.swing.JSpinner();
        secList = new javax.swing.JSpinner();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        amPmList = new javax.swing.JSpinner();

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Add Custom Punches");
        setResizable(false);

        writeButton.setFont(new java.awt.Font("Tahoma", 3, 11)); // NOI18N
        writeButton.setText("write to log");
        writeButton.setActionCommand("writeButton");
        writeButton.setName("writeButton"); // NOI18N
        writeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                writeButtonActionPerformed(evt);
            }
        });

        inOutList.setModel(new javax.swing.SpinnerListModel(new String[] {"In", "Out"}));
        inOutList.setName("inOutList"); // NOI18N

        remainingField.setText("remainingField");

        lateField.setText("lateField");
        lateField.setName("lateField"); // NOI18N

        hourList.setModel(new javax.swing.SpinnerNumberModel(1, 1, 12, 1));
        hourList.setName("hourList"); // NOI18N
        hourList.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                hourListStateChanged(evt);
            }
        });

        minuteList.setModel(new javax.swing.SpinnerNumberModel(0, 0, 59, 1));
        minuteList.setName("minuteList"); // NOI18N
        minuteList.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                minuteListStateChanged(evt);
            }
        });

        secList.setModel(new javax.swing.SpinnerNumberModel(0, 0, 59, 1));
        secList.setName("secList"); // NOI18N
        secList.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                secListStateChanged(evt);
            }
        });

        jLabel1.setText(":");

        jLabel2.setText(":");

        amPmList.setModel(new javax.swing.SpinnerListModel(new String[] {"AM", "PM"}));
        amPmList.setName("amPmList"); // NOI18N
        amPmList.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                amPmListStateChanged(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(inOutList, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(hourList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(minuteList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(secList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(amPmList, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(remainingField, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lateField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(23, 23, 23))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(writeButton)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(13, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(inOutList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(remainingField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lateField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(hourList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(minuteList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(secList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(amPmList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(writeButton)
                .addContainerGap())
        );

        writeButton.getAccessibleContext().setAccessibleName("writeButton");
        inOutList.getAccessibleContext().setAccessibleName("inOutList");
        remainingField.getAccessibleContext().setAccessibleName("remainingField");
        lateField.getAccessibleContext().setAccessibleName("lateField");
        hourList.getAccessibleContext().setAccessibleName("hourList");
        minuteList.getAccessibleContext().setAccessibleName("minuteList");
        secList.getAccessibleContext().setAccessibleName("secList");
        amPmList.getAccessibleContext().setAccessibleName("amPmList");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void writeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_writeButtonActionPerformed
        boolean late; 
        late = lateField.getText() != "okay";
            
        punches.add(new Punch((String)inOutList.getValue(),parseSelectedTime(),currentRemaining,late));
        try {
            writer.writeToFile(punches);
        } catch (IOException ex) {
            Logger.getLogger(PunchEditor.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_writeButtonActionPerformed

    private void hourListStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_hourListStateChanged
        calculateRemaining();
    }//GEN-LAST:event_hourListStateChanged

    private void minuteListStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_minuteListStateChanged
        calculateRemaining();
    }//GEN-LAST:event_minuteListStateChanged

    private void secListStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_secListStateChanged
        calculateRemaining();
    }//GEN-LAST:event_secListStateChanged

    private void amPmListStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_amPmListStateChanged
        calculateRemaining();
    }//GEN-LAST:event_amPmListStateChanged

     private void readDataFile(){
        try{
            punches = reader.openFile();
        }catch(IOException e){
            punches = new ArrayList<>();
            
        }
        
        if(punches.isEmpty()){
            remainingField.setText("03:00:00");
            currentRemaining = 10800000;
            formattedRemaining = "03:00:00";
        }else{
           calculateRemaining();
        }
    }
     
     public static void calculateRemaining(){
        
        long change = parseSelectedTime()-punches.get(punches.size()-1).time;
        currentRemaining = punches.get(punches.size()-1).remaining - change;
        format();
        remainingField.setText(formattedRemaining);
        if(currentRemaining < 0)
            lateField.setText("late");
        else
            lateField.setText("okay");
        
    }
     
    public static long parseSelectedTime(){  
        Calendar cal = Calendar.getInstance();
        int hour, amPm;
        
        if((int)hourList.getValue() == 12)
            hour = 0;
        else
            hour = (int)hourList.getValue();
        
        cal.set(Calendar.HOUR, hour);
        cal.set(Calendar.MINUTE, (int)minuteList.getValue());
        cal.set(Calendar.SECOND, (int)secList.getValue());
        if((String)amPmList.getValue() == "AM")
            amPm = Calendar.AM;
        else
            amPm = Calendar.PM;
        cal.set(Calendar.AM_PM, amPm);
        return cal.getTimeInMillis();
    }
    
    public static String milliToString(long value){
        String string;
        
        TimeMath timeMath = new TimeMath();
       if(value < 0){
            timeMath.set(TimeMath.SECOND, (int) (-value/1000));      
            string = "-" + String.format("%02d",timeMath.get(TimeMath.HOUR)) + 
               ":" + String.format("%02d",timeMath.get(TimeMath.MINUTE))+ ":" + 
               String.format("%02d",timeMath.get(TimeMath.SECOND));
       }else{
            timeMath.set(TimeMath.SECOND, (int) (currentRemaining/1000));      
            string = String.format("%02d",timeMath.get(TimeMath.HOUR)) + 
               ":" + String.format("%02d",timeMath.get(TimeMath.MINUTE))+ ":" + 
               String.format("%02d",timeMath.get(TimeMath.SECOND)); 
       }
        return string;
    }
    
    public static long stringToMilli(String string){
        long value = 0;
        int hours = Integer.parseInt(string.split(":")[0]);
        int mins = Integer.parseInt(string.split(":")[1]);
        int secs = Integer.parseInt(string.split(":")[2]);
        
        value = 3600000*hours + 60000*mins + 1000*secs;
        
        return value;
    }
     
    private static void format(){
       TimeMath timeMath = new TimeMath();
       if(currentRemaining < 0){
            timeMath.set(TimeMath.SECOND, (int) (-currentRemaining/1000));      
            formattedRemaining = "-" + String.format("%02d",timeMath.get(TimeMath.HOUR)) + 
               ":" + String.format("%02d",timeMath.get(TimeMath.MINUTE))+ ":" + 
               String.format("%02d",timeMath.get(TimeMath.SECOND));
       }else{
            timeMath.set(TimeMath.SECOND, (int) (currentRemaining/1000));      
            formattedRemaining = String.format("%02d",timeMath.get(TimeMath.HOUR)) + 
               ":" + String.format("%02d",timeMath.get(TimeMath.MINUTE))+ ":" + 
               String.format("%02d",timeMath.get(TimeMath.SECOND)); 
       }
       
    }
    
       
    public static String combinedTime(String string1, String string2, boolean subtract){
        String[] recordParts = string1.split(":");
        String[] addedParts = string2.split(":");
        TimeMath timeMath = new TimeMath();
        String length;
        timeMath.set(TimeMath.HOUR, Integer.parseInt(recordParts[0]));
        timeMath.set(TimeMath.MINUTE, Integer.parseInt(recordParts[1]));
        timeMath.set(TimeMath.SECOND, Integer.parseInt(recordParts[2]));




        int firstPart = Integer.parseInt(addedParts[0]);
        int secondPart = Integer.parseInt(addedParts[1]);
        int thirdPart = Integer.parseInt(addedParts[2]);


        if(subtract){
            firstPart = -firstPart;
            secondPart = -secondPart;
            thirdPart = -thirdPart;
        }

        if(addedParts.length == 3){
            timeMath.add(TimeMath.HOUR, firstPart);
            timeMath.add(TimeMath.MINUTE, secondPart);
            timeMath.add(TimeMath.SECOND, thirdPart);
        }

        if(addedParts.length == 2){
            timeMath.add(TimeMath.MINUTE, firstPart);
            timeMath.add(TimeMath.SECOND, secondPart);
        }

        if(String.valueOf(timeMath.get(TimeMath.HOUR)).length() <= 2){
            length = "02";
        }
        else if(String.valueOf(timeMath.get(TimeMath.HOUR)).length() < 10){
            length = "0" + String.valueOf(timeMath.get(TimeMath.HOUR)).length();
        }else{
            length = Integer.toString(String.valueOf(timeMath.get(TimeMath.HOUR)).length());
        }

        return (String.format("%"+length+"d", timeMath.get(TimeMath.HOUR))+ ":"
                + String.format("%02d", timeMath.get(TimeMath.MINUTE)) + ":"
                + String.format("%02d", timeMath.get(TimeMath.SECOND)));
    }
   
       
       
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PunchEditor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PunchEditor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PunchEditor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PunchEditor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PunchEditor().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private static javax.swing.JSpinner amPmList;
    private static javax.swing.JSpinner hourList;
    private static javax.swing.JSpinner inOutList;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private static javax.swing.JTextField lateField;
    private static javax.swing.JSpinner minuteList;
    private static javax.swing.JTextField remainingField;
    private static javax.swing.JSpinner secList;
    private javax.swing.JButton writeButton;
    // End of variables declaration//GEN-END:variables
}
